{"version":3,"file":"static/js/224.af21ffca.chunk.js","mappings":"gPACA,EAA2B,2BCA3B,EAAuB,0B,SCSvB,EARoB,SAACA,GACnB,OACE,eAAIC,UAAWC,EAAgB,UAC7B,uBAAIF,EAAMG,QAGhB,ECPA,EAA2B,+BCY3B,EAVqB,SAACH,GACpB,OACE,eAAIC,UAAWC,EAAoB,SAChCF,EAAMI,SAASC,KAAI,SAACC,GAAO,OAC1B,SAAC,EAAW,CAAkBH,KAAMG,EAAQH,MAA1BG,EAAQC,GAA0B,KAI5D,ECVA,EAAuB,6BAAvB,EAAwG,gCAAxG,EAAkJ,gCCiDlJ,EA3CuB,SAACP,GACtB,OAAuCQ,EAAAA,EAAAA,GAAQC,EAAAA,IAAvCC,EAAW,EAAXA,YAAaC,EAAM,EAANA,OAAQC,EAAK,EAALA,MACvBC,GAAiBC,EAAAA,EAAAA,UACfC,EAA4Bf,EAA5Be,eAAgBC,EAAYhB,EAAZgB,QACxBC,QAAQC,IAAIlB,IACZmB,EAAAA,EAAAA,YAAU,WACO,cAAXR,GAA2BC,GAC7BG,GAEJ,GAAG,CAACJ,EAAQC,EAAOG,IAEnB,IAAMK,EAAoB,SAACC,GACzBA,EAAMC,iBAGN,IAAMC,EAAiBV,EAAeW,QAAQC,MAEvB,KAAnBF,GACFb,EAAY,CACVgB,YAAa,CAAEvB,KAAMoB,GACrBP,QAAAA,GAGN,EAEA,OACE,kBAAMf,UAAWC,EAAiByB,SAAUP,EAAkB,UAChD,YAAXT,IACC,gBAAKV,UAAU,WAAU,UACvB,SAAC2B,EAAA,QAAc,OAGnB,iBAAK3B,UAAWC,EAAoByB,SAAUP,EAAkB,WAC9D,kBAAOS,QAAQ,UAAS,2BACxB,qBAAUtB,GAAG,UAAUuB,KAAK,IAAIC,IAAKlB,QAEvC,gBAAKZ,UAAWC,EAAmB,UACjC,mBAAQD,UAAU,MAAK,6BAI/B,ECoBA,EA3DiB,SAACD,GAChB,OAAsDQ,EAAAA,EAAAA,GAAQwB,EAAAA,IAAtDtB,EAAW,EAAXA,YAAmBuB,EAAc,EAApBC,KAAsBvB,EAAM,EAANA,OAC3C,GAA8CwB,EAAAA,EAAAA,WAAS,GAAM,eAAtDC,EAAe,KAAEC,EAAkB,KAClCrB,EAAYhB,EAAZgB,QACRC,QAAQC,IAAIlB,IAEZmB,EAAAA,EAAAA,YAAU,WACRT,EAAYM,EACd,GAAG,CAACN,EAAaM,IAEjB,IAIMsB,GAAwBC,EAAAA,EAAAA,cAAY,WACxC7B,EAAYM,GACZqB,GAAmB,EACrB,GAAG,CAAC3B,EAAaM,IAEbZ,EAAW,cAqBf,MAnBe,YAAXO,IACFP,GACE,gBAAKH,UAAU,WAAU,UACvB,SAAC2B,EAAA,QAAc,OAKN,cAAXjB,GAA0BsB,GAAkBA,EAAeO,OAAS,IACtEpC,GAAW,SAAC,EAAY,CAACA,SAAU6B,KAIxB,cAAXtB,GACEsB,GAA4C,IAA1BA,EAAeO,SAEnCpC,GAAW,sDAIX,qBAASH,UAAWC,EAAoB,WACtC,2CACEkC,IACA,mBAAQnC,UAAU,MAAMwC,QAlCC,WAC7BJ,GAAmB,EACrB,EAgC8D,2BAIzDD,IACC,SAAC,EAAc,CACbrB,eAAgBuB,EAChBtB,QAASA,IAGZZ,IAGP,C","sources":["webpack://practice-project-react-router/./src/components/comments/Comments.module.css?d88e","webpack://practice-project-react-router/./src/components/comments/CommentItem.module.css?204f","components/comments/CommentItem.js","webpack://practice-project-react-router/./src/components/comments/CommentsList.module.css?06d6","components/comments/CommentsList.js","webpack://practice-project-react-router/./src/components/comments/NewCommentForm.module.css?81c1","components/comments/NewCommentForm.js","components/comments/Comments.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"comments\":\"Comments_comments__4OmDP\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"CommentItem_item__K0ly6\"};","import cssClasses from \"./CommentItem.module.css\";\n\nconst CommentItem = (props) => {\n  return (\n    <li className={cssClasses.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"comments\":\"CommentsList_comments__DsIem\"};","import CommentItem from \"./CommentItem\";\nimport cssClasses from \"./CommentsList.module.css\";\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={cssClasses.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"NewCommentForm_form__ohPTw\",\"loading\":\"NewCommentForm_loading__Xz99m\",\"control\":\"NewCommentForm_control__L0nlx\",\"actions\":\"NewCommentForm_actions__-h0lU\"};","import { useEffect, useRef } from \"react\";\nimport useHttp from \"../../hooks/use-http\";\nimport { addComment } from \"../../lib/api\";\nimport LoadingSpinner from \"../ui/LoadingSpinner\";\n\nimport cssClasses from \"./NewCommentForm.module.css\";\n\nconst NewCommentForm = (props) => {\n  const { sendRequest, status, error } = useHttp(addComment);\n  const commentTextRef = useRef();\n  const { onAddedComment, quoteId } = props;\n  console.log(props);\n  useEffect(() => {\n    if (status === \"completed\" && !error) {\n      onAddedComment();\n    }\n  }, [status, error, onAddedComment]);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    // optional: Could validate here\n    const enteredComment = commentTextRef.current.value;\n    // send comment to server\n    if (enteredComment !== \"\") {\n      sendRequest({\n        commentData: { text: enteredComment },\n        quoteId,\n      });\n    }\n  };\n\n  return (\n    <form className={cssClasses.form} onSubmit={submitFormHandler}>\n      {status === \"pending\" && (\n        <div className=\"centered\">\n          <LoadingSpinner />\n        </div>\n      )}\n      <div className={cssClasses.control} onSubmit={submitFormHandler}>\n        <label htmlFor=\"comment\">Your Comment</label>\n        <textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\n      </div>\n      <div className={cssClasses.actions}>\n        <button className=\"btn\">Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import { useCallback, useEffect, useState } from \"react\";\nimport useHttp from \"../../hooks/use-http\";\nimport { getAllComments } from \"../../lib/api\";\nimport LoadingSpinner from \"../ui/LoadingSpinner\";\n\nimport cssClasses from \"./Comments.module.css\";\nimport CommentsList from \"./CommentsList\";\nimport NewCommentForm from \"./NewCommentForm\";\n\nconst Comments = (props) => {\n  const { sendRequest, data: loadedComments, status } = useHttp(getAllComments);\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const { quoteId } = props;\n  console.log(props);\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const onAddedCommentHandler = useCallback(() => {\n    sendRequest(quoteId);\n    setIsAddingComment(false);\n  }, [sendRequest, quoteId]);\n\n  let comments = \"Comments...\";\n\n  if (status === \"pending\") {\n    comments = (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (status === \"completed\" && loadedComments && loadedComments.length > 0) {\n    comments = <CommentsList comments={loadedComments} />;\n  }\n\n  if (\n    status === \"completed\" &&\n    (!loadedComments || loadedComments.length === 0)\n  ) {\n    comments = <p>No Comments added yet...</p>;\n  }\n\n  return (\n    <section className={cssClasses.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm\n          onAddedComment={onAddedCommentHandler}\n          quoteId={quoteId}\n        />\n      )}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n"],"names":["props","className","cssClasses","text","comments","map","comment","id","useHttp","addComment","sendRequest","status","error","commentTextRef","useRef","onAddedComment","quoteId","console","log","useEffect","submitFormHandler","event","preventDefault","enteredComment","current","value","commentData","onSubmit","LoadingSpinner","htmlFor","rows","ref","getAllComments","loadedComments","data","useState","isAddingComment","setIsAddingComment","onAddedCommentHandler","useCallback","length","onClick"],"sourceRoot":""}